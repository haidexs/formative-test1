install.packages('rsconnect')
rsconnect::setAccountInfo(name='haidexs',
token='A3FFB618578257E204154944F9352854',
secret='<SECRET>')
rsconnect::setAccountInfo(name='haidexs',
token='A3FFB618578257E204154944F9352854',
secret='ms9EJEpg6yKiJ5Nl+fukMELTC/wU63Wu9GPPNAdM')
install.packages("swirl")
library(swirl)
install_course_github("core-methods-in-edm", "swirl", multi = TRUE)
swirl()
5+7
x <- 5+7
x
y = x-3
info()
y <- x-3
t
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
library(swirl)
swirl()
2
0
0
info()
main()
getwd()
ls()
quit
info()
bye()
getwd()
A = data.frame("var1" = (1, 2, 3))
A = data.frame("var1" = {1, 2, 3})
A = data.frame("var1" = c(1, 2, 3))
A = data.frame("var1" = c(1, 2, 3), "var2" = c(4, 5, 6), "var3" = c(7, 8, 9))
B = data.matrix(A)
View(B)
C = t(A)
D = B%*%C
View(D)
D = B*C
D = B%*%C
D[2,2]
D[(2,2),(3,3)]
D[c(2,2),c(3,3)]
D[c(1, 2, 3)]
D[c(1, 2, 3, 4, 5, 6)]
diag(D)
diag(D) =  0
D
View(C)
View(D)
A = data.frame("var1" = c(1, 2, 3), "var2" = c(4, 5, 6), "var3" = c(7, 8, 9))
B = data.matrix(A)
C = t(A)
D = B%*%C
knitr::opts_chunk$set(echo = TRUE)
D1 = read.csv("HMXPC13_DI_v2_5-14-14.csv", header = TRUE);
n_cert = nrow(subset(D1, certified=="1" & course_id == "HarvardX/CS50x/2012"))
n_CS50x_Colmb_10152012d = nrow(subset(D1, registered == 1 & course_id=="HarvardX/CS50x/2012" & final_cc_cname_DI=="Colombia" & start_time_DI == "2012-10-15"))
D2_all = subset(D1, final_cc_cname_DI=="Germany")
D2 = subset(D2_all, select = c(userid_DI, start_time_DI, final_cc_cname_DI))
library(tidyr)
library(dplyr)
DF = D2_all
D3_tmp = data.frame("user_id" = DF$userid_DI,
"reg_date" = DF$start_time_DI,
"registered" = DF$registered)
# remove duplicates in D3_tmp
D3_tmp2 = unique(D3_tmp)
D3 = spread(data=D3_tmp2, reg_date, registered)
row.names(D3) = D3$user_id
D3 = subset(D3, select = -c(user_id))
M1 = data.matrix(D3)
M2 = t(M1)
View(D3)
View(D1)
D2_all = subset(D1, final_cc_cname_DI=="Spain")
D2_all = subset(D1, final_cc_cname_DI=="Poland")
View(D2_all)
D2_all = subset(D1, final_cc_cname_DI=="bangladesh")
D2_all = subset(D1, final_cc_cname_DI=="Bangladesh")
D2_all = subset(D1, final_cc_cname_DI=="Russian Federation")
D2_all = subset(D1, final_cc_cname_DI=="Pakistan")
D2_all = subset(D1, final_cc_cname_DI=="Egypt")
D2_all = subset(D1, final_cc_cname_DI=="Germany")
kable(D2)
library(knitr)
kable(D2)
diag(M2) = NA
View(M2)
getwd()
hist()
help("hist")
help("plot")
getwd()
setwd("Google_Drive/Courses/TC/3_Fall_2017/HUDK_4050_Core_Methods_in_EDM/class_activity/formative-test1/")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(plotly)
packageVersion('plotly')
D2 = read.csv("formative1-results-DI.csv")
D3 = D2
D3[D3 == "Yes"] <- "1"
D1 = read_excel("D1.xlsx")
D1 = subset(D1, select = -c(X__1, pull.request, attached.rmd))
M1 = as.matrix(D1)
class(M1) <- "numeric"
p <- plot_ly(z = M1, colors = colorRamp(c("blue", "orange")), type = "heatmap")
p
View(D2)
D2 = read.csv("formative1-results-DI.csv")
D3 = D2
D3[D3[] == "Yes"] <- "1"
View(D3)
D3[D3[-c] == "Yes"] <- "1"
D3[D3[-c()] == "Yes"] <- "1"
D2 = read.csv("formative1-results-DI.csv", stringsAsFactors=FALSE)
D3 = D2
D3[D3[-c()] == "Yes"] <- "1"
D3[D3== "Yes"] <- "1"
D2 = read.csv("formative1-results-DI.csv", stringsAsFactors=FALSE)
D3 = D2
D3[D3== "Yes"] <- 1
D3[D3 == "Did not answer"] = 0
D3[D3 == "No"] = 0
p.show()
plot(p)
htmltools::tagList(list(p, p))
View(D3)
p <- plot_ly(z = M1, colors = colorRamp(c("blue", "orange")), type = "heatmap") %>%
layout(xaxis = "aaa", yaxis = "bbb")
htmltools::tagList(list(p, p))
p <- plot_ly(z = M1, colors = colorRamp(c("blue", "orange")), type = "heatmap")
htmltools::tagList(list(p, p))
p <- plot_ly(z = M1, colors = colorRamp(c("blue", "orange")), type = "heatmap") %>%
layout(xaxis = list("Question Number"), yaxis = list("Student ID"))
htmltools::tagList(list(p, p))
p <- plot_ly(z = M1, colors = colorRamp(c("blue", "orange")), type = "heatmap") %>%
layout(xaxis = list(title = "Question Number"), yaxis = list(title = "Student ID"))
htmltools::tagList(list(p, p))
p <- plot_ly(z = M1,
colors = colorRamp(c("blue", "orange")),
type = "heatmap",
x=c(1:14)) %>%
layout(xaxis = list(title = "Question Number"), yaxis = list(title = "Student ID"))
htmltools::tagList(list(p, p))
